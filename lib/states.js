'use strict';

/*eslint no-unused-vars: ['off']*/

const rgb = require(__dirname + '/rgb.js');
const utils = require(__dirname + '/utils.js');

/* states for device:
   id - sysname of state, id
   name - display name of state
   prop - attr name of payload object with value of state
   icon - url of state icon
   role - state role
   write, read - allow to write and read state from admin
   type - type of value
   isEvent - sign of clearing the value after 300ms
   isOption - if state is internal setting, not to be sent to device
   inOptions - if true, value of this state will be included in options argument of other states setter(Opt)
   getter - result of call is the value of state. if value is undefined - state not apply
   setter - result of call is the value for publish to zigbee
   setterOpt - result of call is the options for publish to zigbee
   setattr - name of converter to zigbee, if it different from "prop" value
   epname - endpoint name for publish
   lazy - if true, then the state will not be created until the first event for the specified state arrives
*/

const timers = {};

const states = {
    groups: {
        id: 'groups',
        name: 'Groups',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        isOption: true,
    },
    link_quality: {
        id: 'link_quality',
        prop: 'linkquality',
        name: 'Link quality',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        min: 0,
        max: 254
    },
    available: {
        id: 'available',
        prop: 'available',
        name: 'Available',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean'
    },
    checking: { // press button for checking
        id: 'checking',
        name: 'Start checking process',
        icon: undefined,
        role: 'button',
        write: true,
        read: false,
        type: 'boolean',
    },
    click: {
        id: 'click',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'single') ? true : undefined,
    },
    double_click: {
        id: 'double_click',
        prop: 'click',
        name: 'Double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'double') ? true : undefined,
    },
    action: {
        id: 'action',
        prop: 'action',
        name: 'button action',
        role: 'button',
        write: false,
        read: true,
        type: 'text',
    },
    action_single: {
        id: 'click',
        prop: 'action',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single') ? true : undefined,
    },
    action_click: {
        id: 'click',
        prop: 'action',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'click') ? true : undefined,
    },
    action_double_click: {
        id: 'double_click',
        prop: 'action',
        name: 'Double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'double') ? true : undefined,
    },
    action_group: {
        id: 'action_group',
        prop: 'action_group',
        name: 'Action group',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    triple_click: {
        id: 'triple_click',
        prop: 'click',
        name: 'Triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'triple') ? true : undefined,
    },
    quad_click: {
        id: 'quad_click',
        prop: 'click',
        name: 'Quadruple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'quadruple') ? true : undefined,
    },
    many_click: {
        id: 'many_click',
        prop: 'click',
        name: 'Many clicks event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'many') ? true : undefined,
    },
    long_click: {
        id: 'long_click',
        prop: 'click',
        name: 'Long click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'long') ? true : undefined,
    },
    action_long_click: {
        id: 'long_click',
        prop: 'action',
        name: 'Long click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'long') ? true : undefined,
    },
    long_press: {
        id: 'long_press',
        prop: 'click',
        name: 'Long press',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'long') ? true : (payload.click === 'long_release') ? false : undefined,
    },
    voltage: {
        id: 'voltage',
        name: 'Battery voltage',
        icon: 'img/battery_v.png',
        role: 'battery.voltage',
        write: false,
        read: true,
        type: 'number',
        unit: 'V',
        getter: payload => payload.voltage / 1000,
    },
    ecozy_voltage: {
        id: 'voltage',
        name: 'Battery voltage',
        icon: 'img/battery_v.png',
        role: 'battery.voltage',
        write: false,
        read: true,
        type: 'number',
        unit: 'V',
        getter: payload => payload.voltage * 10,
    },
    battery: {
        id: 'battery',
        prop: 'battery',
        name: 'Battery percent',
        icon: 'img/battery_p.png',
        role: 'battery.percent',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        min: 0,
        max: 100
    },
    left_click: {
        id: 'left_click',
        prop: 'click',
        name: 'Left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left') ? true : undefined,
    },
    right_click: {
        id: 'right_click',
        prop: 'click',
        name: 'Right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right') ? true : undefined,
    },
    both_click: {
        id: 'both_click',
        prop: 'click',
        name: 'Both click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both') ? true : undefined,
    },
    left_click_single: {
        id: 'left_click',
        prop: 'click',
        name: 'Left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left_single') ? true : undefined,
    },
    right_click_single: {
        id: 'right_click',
        prop: 'click',
        name: 'Right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right_single') ? true : undefined,
    },
    both_click_single: {
        id: 'both_click',
        prop: 'click',
        name: 'Both click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both_single') ? true : undefined,
    },
    left_click_long: {
        id: 'left_click_long',
        prop: 'click',
        name: 'Left click long event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left_long') ? true : undefined,
    },
    left_click_double: {
        id: 'left_click_double',
        prop: 'click',
        name: 'Left click double event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'left_double') ? true : undefined,
    },
    right_click_long: {
        id: 'right_click_long',
        prop: 'click',
        name: 'Right click long event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right_long') ? true : undefined,
    },
    right_click_double: {
        id: 'right_click_double',
        prop: 'click',
        name: 'Right click double event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'right_double') ? true : undefined,
    },
    both_click_long: {
        id: 'both_click_long',
        prop: 'click',
        name: 'Both click long event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both_long') ? true : undefined,
    },
    both_click_double: {
        id: 'both_click_double',
        prop: 'click',
        name: 'Both click double event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'both_double') ? true : undefined,
    },
    state: {
        id: 'state',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setterOpt: (value, options) => {
            const stateValue = (value ? 'ON' : 'OFF');
            return {...options, state: stateValue};
        },
        inOptions: true,
    },
    stateEp: {
        id: 'state',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        epname: 'default',
    },
    left_state: {
        id: 'left_state',
        prop: 'state_left',
        name: 'Left switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'left',
    },
    right_state: {
        id: 'right_state',
        prop: 'state_right',
        name: 'Right switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'right',
    },
    center_state: {
        id: 'center_state',
        prop: 'state_center',
        name: 'Center switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_center === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'center',
    },
    left_button: {
        id: 'left_button',
        prop: 'button_left',
        name: 'Left button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.button_left === 'hold')
    },
    right_button: {
        id: 'right_button',
        prop: 'button_right',
        name: 'Right button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.button_right === 'hold'),
    },
    temperature: {
        id: 'temperature',
        name: 'Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: '°C'
    },
    humidity: {
        id: 'humidity',
        name: 'Humidity',
        icon: undefined,
        role: 'value.humidity',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        min: 0,
        max: 100
    },
    pressure: {
        id: 'pressure',
        name: 'Pressure',
        icon: undefined,
        role: 'value.pressure',
        write: false,
        read: true,
        type: 'number',
        unit: 'hPa',
        min: 0,
        max: 100
    },
    illuminance: {
        id: 'illuminance',
        prop: 'illuminance_lux',
        name: 'Illuminance',
        icon: undefined,
        role: 'value.brightness',
        write: false,
        read: true,
        type: 'number',
        unit: 'lux'
    },
    illuminance_raw: {
        id: 'illuminance_raw',
        prop: 'illuminance',
        name: 'Illuminance raw',
        icon: undefined,
        role: 'value.brightness',
        write: false,
        read: true,
        type: 'number',
        unit: ''
    },
    occupancy: {
        id: 'occupancy',
        name: 'Occupancy',
        icon: undefined,
        role: 'sensor.motion',
        write: false,
        read: true,
        type: 'boolean',
    },
    occupancy_event: {
        id: 'occupancy',
        name: 'Occupancy event',
        icon: undefined,
        role: 'sensor.motion',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    occupancy_pirOToUDelay: {
        // this is different from occupancy_timeout,
        // is writable timeout (to device).
        id: 'occupancy_timeout',
        prop: 'occupancy_timeout',
        name: 'Delay Occupied to Unoccupied',
        icon: undefined,
        role: 'variable',
        write: true,
        read: true,
        type: 'number',
        epname: 'ep2', // philips hue sml001
    },
    no_motion: {
        id: 'no_motion',
        prop: 'occupancy',
        name: 'Time from last motion',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'seconds',
        prepublish: (devId, value, callback, options) => {
            if (value) {
                if (timers[devId]) {
                    clearInterval(timers[devId]);
                    delete timers[devId];
                }
                callback(0);
            } else {
                if (!timers[devId]) {
                    const hasTimeout = options && options.hasOwnProperty('occupancy_timeout');
                    let counter = hasTimeout ? options.occupancy_timeout : 60;
                    callback(counter);
                    timers[devId] = setInterval(() => {
                        counter = counter + 10;
                        callback(counter);
                        if (counter > 1800) { // cancel after 1800 sec
                            clearInterval(timers[devId]);
                            delete timers[devId];
                        }
                    }, 10000); // update every 10 second
                }
            }
        }
    },
    contact: {
        id: 'contact',
        name: 'Contact event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean'
    },
    opened: {
        id: 'opened',
        prop: 'contact',
        name: 'Is open',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => !payload.contact,
    },
    tamper: {
        id: 'tampered',
        prop: 'tamper',
        name: 'Is tampered',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
    },
    water_detected: {
        id: 'detected',
        prop: 'water_leak',
        name: 'Water leak detected',
        icon: undefined,
        role: 'indicator.leakage',
        write: false,
        read: true,
        type: 'boolean'
    },
    gas_detected: {
        id: 'detected',
        prop: 'gas',
        name: 'Gas leak detected',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'boolean'
    },
    smoke_detected: {
        id: 'detected',
        prop: 'smoke',
        name: 'Smoke leak detected',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'boolean'
    },
    smoke_detected2: {   // for Heiman
        id: 'smoke',
        prop: 'smoke',
        name: 'Smoke leak detected',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'boolean'
    },
    co_detected: {   // for Heiman
        id: 'carbon_monoxide',
        prop: 'carbon_monoxide',
        name: 'CO leak detected',
        icon: undefined,
        role: 'indicator.alarm.carbon_monoxide',
        write: false,
        read: true,
        type: 'boolean'
    },
    heiman_batt_low: {
        id: 'battery_low',
        prop: 'battery_low',
        name: 'Battery Status Low',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean'
    },
    heiman_battery: {
        id: 'battery',
        prop: 'battery',
        name: 'Battery percent',
        icon: 'img/battery_p.png',
        role: 'battery.percent',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        min: 0,
        max: 100
    },
    heiman_smart_controller_armed: {
        id: 'arm_state',
        prop: 'action',
        name: 'Alarm Armed State',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'armmode_disarm') ? false : true,
    },
    heiman_smart_controller_arm_mode: {
        id: 'arm_mode',
        prop: 'action',
        name: 'Alarm Armed State',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'armmode_arm_all_zones') ? 'full' : 'partial',
    },
    heiman_smart_controller_emergency: {
        id: 'emergency',
        prop: 'action',
        name: 'Emergency',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'emergency') ? true : false,
    },
    heiman_execute_warning: { // for HEIMAN HS2WD-E
        id: 'execute_warning',
        prop: 'warning',
        name: 'Execute warning (input: duration in sec)',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        setter: (value) => {
            return {strobe: true, duration: value};
        },
    },
    heiman_execute_warning_strobe_only: { // for HEIMAN HS2WD-E
        id: 'execute_warning_strobe_only',
        prop: 'warning',
        name: 'Execute warning strobe only (input: duration in sec)',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        setter: (value) => {
            return {mode: 'stop', strobe: true, duration: value};
        },
    },
    bitron_execute_warning: { // for Biton AV2010/24A
        id: 'execute_warning',
        prop: 'warning',
        name: 'Execute warning (input: duration in sec)',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        setter: (value) => {
            return {strobe: false, duration: value};
        },
    },
    shake: {
        id: 'shake',
        prop: 'action',
        name: 'Shake event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'shake') ? true : undefined,
    },
    wakeup: {
        id: 'wakeup',
        prop: 'action',
        name: 'Wakeup event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'wakeup') ? true : undefined,
    },
    fall: {
        id: 'fall',
        prop: 'action',
        name: 'Free fall event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'fall') ? true : undefined,
    },
    tap: {
        id: 'tap',
        prop: 'action',
        name: 'Tapped twice event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'tap') ? true : undefined,
    },
    tap_side: {
        id: 'tap_side',
        prop: 'side',
        name: 'Top side on tap',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'tap') ? payload.side : undefined,
    },
    slide: {
        id: 'slide',
        prop: 'action',
        name: 'Slide event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'slide') ? true : undefined,
    },
    slide_side: {
        id: 'slide_side',
        prop: 'side',
        name: 'Top side on slide',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'slide') ? payload.side : undefined,
    },
    flip180: {
        id: 'flip180',
        prop: 'action',
        name: 'Flip on 180°',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'flip180') ? true : undefined,
    },
    flip180_side: {
        id: 'flip180_side',
        prop: 'side',
        name: 'Top side on flip 180°',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'flip180') ? payload.side : undefined,
    },
    flip90: {
        id: 'flip90',
        prop: 'action',
        name: 'Flip on 90° event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'flip90') ? true : undefined,
    },
    flip90_from: {
        id: 'flip90_from',
        prop: 'from_side',
        name: 'From top side on flip 90°',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'flip90') ? payload.from_side : undefined,
    },
    flip90_to: {
        id: 'flip90_to',
        prop: 'to_side',
        name: 'To top side on flip 90°',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'flip90') ? payload.to_side : undefined,
    },
    rotate_left: {
        id: 'rotate_left',
        prop: 'action',
        name: 'Rotate left event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'rotate_left') ? true : undefined,
    },
    rotate_right: {
        id: 'rotate_right',
        prop: 'action',
        name: 'Rotate right event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'rotate_right') ? true : undefined,
    },
    rotate_stop: {
        id: 'rotate_stop',
        prop: 'action',
        name: 'Rotate stop event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'rotate_stop') ? true : undefined,
    },
    rotate_angle: {
        id: 'rotate_angle',
        prop: 'angle',
        name: 'Rotate angle',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    action_play_pause: {
        id: 'button_play_pause',
        prop: 'action',
        name: 'Play/Pause Button',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'play_pause') ? true : undefined,
    },
    load_power: {
        id: 'load_power',
        prop: 'power',
        name: 'Load power',
        icon: undefined,
        role: 'value.power',
        write: false,
        read: true,
        type: 'number',
        unit: 'W'
    },
    plug_voltage: {
        id: 'voltage',
        name: 'Load voltage',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
        unit: 'V'
    },
    load_current: {
        id: 'current',
        prop: 'current',
        name: 'Load current',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
        unit: 'A'
    },
    plug_consumption: {
        id: 'consumption',
        name: 'Consumption',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
    },
    plug_temperature: {
        id: 'temperature',
        name: 'Temperature',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
    },
    brightness_readonly: {
        id: 'brightness',
        name: 'Brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        getter: payload => {
            return utils.bulbLevelToAdapterLevel(payload.brightness);
        },
    },
    brightness: {
        id: 'brightness',
        name: 'Brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: true,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        getter: payload => {
            return utils.bulbLevelToAdapterLevel(payload.brightness);
        },
        setter: (value, options) => {
            return utils.adapterLevelToBulbLevel(value);
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            const preparedOptions = {...options, transition: transitionTime};
            preparedOptions.brightness = utils.adapterLevelToBulbLevel(value);
            return preparedOptions;
        },
        readResponse: (resp) => {
            const respObj = resp[0];
            if (respObj.status === 0 && respObj.attrData != undefined) {
                return utils.bulbLevelToAdapterLevel(respObj.attrData);
            }
        },
    },
    colortemp: {
        id: 'colortemp',
        prop: 'color_temp',
        name: 'Color temperature',
        icon: undefined,
        role: 'level.color.temperature',
        write: true,
        read: true,
        type: 'number',
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {...options, transition: transitionTime};
        },
    },
    color: {
        id: 'color',
        prop: 'color',
        name: 'Color',
        icon: undefined,
        role: 'level.color.rgb',
        write: true,
        read: true,
        type: 'string',
        setter: (value) => {
            // convert RGB to XY for set
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(value);
            let xy = [0, 0];
            if (result) {
                const r = parseInt(result[1], 16),
                    g = parseInt(result[2], 16),
                    b = parseInt(result[3], 16);
                xy = rgb.rgb_to_cie(r, g, b);
            }
            return {
                x: xy[0],
                y: xy[1]
            };
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {...options, transition: transitionTime};
        },
    },
    transition_time: {
        id: 'transition_time',
        name: 'Transition time',
        icon: undefined,
        role: 'state',
        write: true,
        read: false,
        type: 'number',
        unit: 'sec',
        isOption: true,
    },
    operation_mode: {
        id: 'decoupled',
        prop: 'operation_mode',
        name: 'Decoupled mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => {
            return {button: 'single', state: value ? 'decoupled' : 'control_relay'};
        },
    },
    operation_mode_left: {
        id: 'decoupled_left',
        prop: 'operation_mode',
        name: 'Left decoupled mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => {
            return {button: 'left', state: value ? 'decoupled' : 'control_left_relay'};
        },
    },
    operation_mode_right: {
        id: 'decoupled_right',
        prop: 'operation_mode',
        name: 'Right decoupled mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => {
            return {button: 'right', state: value ? 'decoupled' : 'control_right_relay'};
        },
    },
    temp_calibration: {
        id: 'temperature_calibration',
        prop: 'temperature_calibration',
        name: 'Temperature Calibration Offset',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        isOption: true,
    },
    illuminance_calibration: {
        id: 'illuminance_calibration',
        prop: 'illuminance_calibration',
        name: 'Illuminance Calibration Percentage',
        icon: undefined,
        role: 'value.brightness',
        write: true,
        read: true,
        type: 'number',
        unit: '%',
        isOption: true,
    },
    humidity_calibration: {
        id: 'humidity_calibration',
        prop: 'humidity_calibration',
        name: 'Humidity Calibration Percentage',
        icon: undefined,
        role: 'value.humidity',
        write: true,
        read: true,
        type: 'number',
        unit: '%',
        isOption: true,
    },
    // osram switch mini
    switch_circle: {
        id: 'circle',
        prop: 'action',
        name: 'Circle state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'circle_click') ? 'press' : (payload.action === 'circle_hold') ? 'hold' : undefined,
    },
    switch_state: {
        id: 'state',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'up') ? 'up' : (payload.action === 'down') ? 'down' : (payload.action === 'circle_click') ? 'circle' : undefined,
    },
    switch_hold: {
        id: 'hold',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'up_hold') ? 'up' : (payload.action === 'down_hold') ? 'down' : (payload.action === 'circle_hold') ? 'circle':  undefined,
    },
    switch_release: {
        id: 'release',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'up_release') ? 'up' : (payload.action === 'down_release') ? 'down' : (payload.action === 'circle_release') ? 'circle':  undefined,
    },
    // new RWL states
    rwl_state: {
        id: 'state',
        prop: 'action',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on-press') ? true : (payload.action === 'off-press') ? false : undefined,
    },
    rwl_up_button: {
        id: 'up_button',
        prop: 'action',
        name: 'Up button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'up-press') ? true : undefined
    },
    rwl_up_hold: {
        id: 'up_hold',
        prop: 'action',
        name: 'Up button hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'up-hold') ? true : undefined
    },
    rwl_down_button: {
        id: 'down_button',
        prop: 'action',
        name: 'Down button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'down-press') ? true : undefined
    },
    rwl_down_hold: {
        id: 'down_hold',
        prop: 'action',
        name: 'Down button hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'down-hold') ? true : undefined
    },
    rwl_counter: {
        id: 'click_count',
        prop: 'counter',
        name: 'Click count per action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    rwl_duration: {
        id: 'press_duration',
        prop: 'duration',
        name: 'Press duration',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    rwl_multiple_press_timeout: {
        id: 'multiple_press_timeout',
        prop: 'multiple_press_timeout',
        name: 'Multiple press timeout',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: 'sec',
        isOption: true,
    },
    sml_sensitivity: {
        id: 'motion_sensitivity',
        prop: 'motion_sensitivity',
        name: 'Motion Sensitivity (0-2)',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min:  0,
        max:  2,
        epname: 'ep2',
    },
    occupancy_timeout: {
        id: 'occupancy_timeout',
        name: 'Occupancy timeout',
        icon: undefined,
        role: 'state',
        write: true,
        read: false,
        type: 'number',
        unit: 'sec',
        isOption: true,
    },
    rotate_direction: {
        id: 'direction',
        name: 'rotate direction',
        icon: undefined,
        prop: 'direction',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    rotate_number: {
        id: 'number',
        name: 'rotate number',
        icon: undefined,
        prop: 'number',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    DNCKAT_state_1: {
        id: 'state_1',
        prop: 'state_left',
        name: 'Switch state 1',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'left',
    },
    DNCKAT_state_2: {
        id: 'state_2',
        prop: 'state_right',
        name: 'Switch state 2',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'right',
    },
    DNCKAT_state_3: {
        id: 'state_3',
        prop: 'state_center',
        name: 'Switch state 3',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_center === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'center',
    },
    DNCKAT_state_41: {
        id: 'state_1',
        prop: 'state_bottom_left',
        name: 'Switch state 1',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_bottom_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'bottom_left',
    },
    DNCKAT_state_42: {
        id: 'state_2',
        prop: 'state_bottom_right',
        name: 'Switch state 2',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_bottom_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'bottom_right',
    },
    DNCKAT_state_43: {
        id: 'state_3',
        prop: 'state_top_left',
        name: 'Switch state 3',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_top_left === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'top_left',
    },
    DNCKAT_state_44: {
        id: 'state_4',
        prop: 'state_top_right',
        name: 'Switch state 4',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_top_right === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'top_right',
    },
    vibration_action: {
        id: 'vibration',
        prop: 'action',
        name: 'Vibration event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'vibration') ? true : undefined,
    },
    tilt_action: {
        id: 'tilt',
        prop: 'action',
        name: 'Tilt event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'tilt') ? true : undefined,
    },
    drop_action: {
        id: 'drop',
        prop: 'action',
        name: 'Drop event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'drop') ? true : undefined,
    },
    tilt_angle: {
        id: 'tilt_angle',
        prop: 'angle',
        name: 'Tilt angle',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_x: {
        id: 'tilt_angle_x',
        prop: 'angle_x',
        name: 'Tilt angle X',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_y: {
        id: 'tilt_angle_y',
        prop: 'angle_y',
        name: 'Tilt angle Y',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_z: {
        id: 'tilt_angle_z',
        prop: 'angle_z',
        name: 'Tilt angle Z',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_x_abs: {
        id: 'tilt_angle_x_abs',
        prop: 'angle_x_absolute',
        name: 'Tilt angle X absolute ',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    tilt_angle_y_abs: {
        id: 'tilt_angle_y_abs',
        prop: 'angle_y_absolute',
        name: 'Tilt angle Y absolute',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    E1524_toggle: {
        id: 'toggle',
        prop: 'action',
        name: 'Toggle event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'toggle') ? true : undefined,
    },
    E1524_hold: {
        id: 'hold',
        prop: 'action',
        name: 'Hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'toggle_hold') ? true : undefined,
    },
    E1524_left_click: {
        id: 'left_click',
        prop: 'action',
        name: 'Left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'arrow_left_click') ? true : undefined,
    },
    E1524_right_click: {
        id: 'right_click',
        prop: 'action',
        name: 'Right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'arrow_right_click') ? true : undefined,
    },
    E1524_left_button: {
        id: 'left_button',
        prop: 'action',
        name: 'Left button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'arrow_left_hold') ? true : (payload.action === 'arrow_left_release') ? false : undefined,
    },
    E1524_right_button: {
        id: 'right_button',
        prop: 'action',
        name: 'Right button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'arrow_right_hold') ? true : (payload.action === 'arrow_right_release') ? false : undefined,
    },

    E1524_up_click: {
        id: 'up_click',
        prop: 'action',
        name: 'Up click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_up_click') ? true : undefined,
    },
    E1524_down_click: {
        id: 'down_click',
        prop: 'action',
        name: 'Down click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_down_click') ? true : undefined,
    },
    E1524_up_button: {
        id: 'up_button',
        prop: 'action',
        name: 'Up button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'brightness_up_hold') ? true : (payload.action === 'brightness_up_release') ? false : undefined,
    },
    E1743_onoff: {
        id: 'state',
        prop: 'click',
        name: 'Switch event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'on') ? true : ((payload.click === 'off') ? false : undefined),
    },
    E1743_up_button: {
        id: 'up_button',
        prop: 'click',
        name: 'Up button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'brightness_up') ? true : ((payload.click === 'brightness_stop') ? false : undefined),
    },
    E1743_down_button: {
        id: 'down_button',
        prop: 'click',
        name: 'Down button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'brightness_down') ? true : ((payload.click === 'brightness_stop') ? false : undefined),
    },
    E1524_down_button: {
        id: 'down_button',
        prop: 'action',
        name: 'Down button pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'brightness_down_hold') ? true : (payload.action === 'brightness_down_release') ? false : undefined,
    },
    tint404011_onoff: {
        id: 'state',
        prop: 'action',
        name: 'Switch event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on') ? true : ((payload.action === 'off') ? false : undefined),
    },
    tint404011_brightness_up_click: {
        id: 'brightness_up_click',
        prop: 'action',
        name: 'Brightness up click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_up_click') ? true : undefined,
    },
    tint404011_brightness_up_hold: {
        id: 'brightness_up_hold',
        prop: 'action',
        name: 'Brightness up hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: false,
        getter: payload => (payload.action === 'brightness_up_hold') ? true : ( payload.action === 'brightness_up_release' ) ? false : undefined,
    },
    tint404011_brightness_down_click: {
        id: 'brightness_down_click',
        prop: 'action',
        name: 'Brightness down click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_down_click') ? true : undefined,
    },
    tint404011_brightness_down_hold: {
        id: 'brightness_down_hold',
        prop: 'action',
        name: 'Brightness down hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: false,
        getter: payload => (payload.action === 'brightness_down_hold') ? true : ( payload.action === 'brightness_down_release' ) ? false : undefined,
    },
    tint404011_colortemp_read: {
        id: 'colortemp',
        prop: 'action',
        name: 'Color temperature',
        icon: undefined,
        role: 'level.color.temperature',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.action === 'color_temp') ? payload.action_color_temperature : undefined,
    },
    tint404011_color_read: {
        id: 'color',
        prop: 'action',
        name: 'Color',
        icon: undefined,
        role: 'level.color.rgb',
        write: false,
        read: true,
        type: 'string',
        getter: (payload) => {
            if( payload.action === 'color_wheel') {
                const colorval = rgb.cie_to_rgb(payload.action_color.x, payload.action_color.y);
                return '#' + utils.decimalToHex(colorval[0]) + utils.decimalToHex(colorval[1]) + utils.decimalToHex(colorval[2]);
            } else {
                return undefined;
            }
        }
    },
    tint404011_scene_working: {
        // 100% brightness neutral-white light.
        id: 'scene_working',
        prop: 'action',
        name: 'Work lights scene selected',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'scene_3') ? true : undefined,
    },
    tint404011_scene_sunset:  {
        // starting with warm-white light at 50% brightness then dims after 15 minutes.
        // after another 10 minutes the light is turned off
        id: 'scene_sunset',
        prop: 'action',
        name: 'Sunset scene selected',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'scene_1') ? true : undefined,
    },
    tint404011_scene_party: {
        // colourful continuous change of light color
        id: 'scene_party',
        prop: 'action',
        name: 'Party scene selected',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'scene_2') ? true : undefined,
    },
    tint404011_scene_nightlight: {
        // warm-white light dimmed to 5%
        id: 'scene_nightlight',
        prop: 'action',
        name: 'Nightlight scene selected',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'scene_6') ? true : undefined,
    },
    tint404011_scene_bonfire: {
        // simulates a bonfire with flickering colours between orange, red and white
        id: 'scene_bonfire',
        prop: 'action',
        name: 'Bonfire scene selected',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'scene_4') ? true : undefined,
    },
    tint404011_scene_romance: {
        // constantly transitioning colours between red, violet and pink
        id: 'scene_romance',
        prop: 'action',
        name: 'Romance scene selected',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'scene_5') ? true : undefined,
    },
    button_action_on: {
        // generic on button with 'action=on' as payload
        id: 'button_on',
        prop: 'action',
        name: 'Button On',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'on') ? true : undefined,
    },
    button_action_off: {
        // generic on button with 'action=on' as payload
        id: 'button_off',
        prop: 'action',
        name: 'Button Off',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'off') ? true : undefined,
    },
    button_action_skip_forward: {
        // generic on button with 'action=on' as payload
        id: 'button_skip_foward',
        prop: 'action',
        name: 'Button Skip Forward',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'skip_forward') ? true : undefined,
    },
    button_action_skip_back: {
        // generic on button with 'action=on' as payload
        id: 'button_skip_back',
        prop: 'action',
        name: 'Button Skip Backwards',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'skip_backward') ? true : undefined,
    },
    button_action_press: {
        id: 'button_press',
        prop: 'action',
        name: 'Button Press',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: false,
        getter: payload => (payload.action === 'press') ? true : undefined,
    },
    button_action_hold: {
        id: 'button_hold',
        prop: 'action',
        name: 'Button Hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: false,
        getter: payload => (payload.action === 'hold') ? true : undefined,
    },
    button_action_release: {
        id: 'button_release',
        prop: 'action',
        name: 'Button Release',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: false,
        getter: payload => (payload.action === 'release') ? true : undefined,
    },

    // hvac Thermostat cluster - generic states
    hvacThermostat_local_temp: {
        id: 'local_temp',
        prop: 'local_temperature',
        name: 'Local Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: '°C',
    },
    hvacThermostat_local_temp_calibration: {
        id: 'local_temp_calibration',
        prop: 'local_temperature_calibration',
        name: 'Temperature Calibration',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
    },
    hvacThermostat_remote_sensing: {
        id: 'remote_sensing',
        prop: 'remote_sensing',
        name: 'Remote Sensing',
        icon: undefined,
        write: true,
        read: true,
        min:  0,
        max:  7,
        type: 'number',
    },
    hvacThermostat_control_sequence_of_operation_write: {
        id: 'control_sequence_of_operation',
        prop: 'control_sequence_of_operation',
        name: 'Remote control_sequence_of_operation',
        icon: undefined,
        write: true,
        read: true,
        //        type: 'number',
    },
    hvacThermostat_setpoint_raise_lower: {
        id: 'setpoint_raise_lower',
        prop: 'setpoint_raise_lower',
        name: 'Raise or Lower Setpoint',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
    },
    hvacThermostat_occupancy: {
        id: 'occupancy',
        prop: 'occupancy',
        name: 'Occupancy',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.occupancy % 1 === 1),
        setter: (value) => (value) ? 1 : 0,
        setattr: 'state',
        epname: 'left',
    },
    hvacThermostat_occupied_heating_setpoint: {
        id: 'heating_setpnt_occupied',
        prop: 'occupied_heating_setpoint',
        name: 'Occupied Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
    },
    hvacThermostat_unoccupied_heating_setpoint: {
        id: 'heating_setpnt_unoccupied',
        prop: 'unoccupied_heating_setpoint',
        name: 'Unoccupied Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
    },
    hvacThermostat_weeklySchedule: {
        id: 'weekly_schedule',
        prop: 'weekly_schedule',
        name: 'Weekly Schedule',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_clear_weeklySchedule: {
        id: 'clear_weekly_schedule',
        prop: 'clear_weekly_schedule',
        name: 'Clear Weekly Schedule',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_weekly_schedule_rsp: {
        id: 'weekly_schedule_rsp',
        prop: 'weekly_schedule_rsp',
        name: 'weekly_schedule_rsp',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_relay_status_log: {
        id: 'relay_status_log',
        prop: 'relay_status_log',
        name: 'relay_status_log',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    hvacThermostat_relay_status_log_rsp: {
        id: 'relay_status_log_rsp',
        prop: 'relay_status_log_rsp',
        name: 'relay_status_log_rsp',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    hvacThermostat_setpoint_change_amount: {
        id: 'setpoint_change_amount',
        prop: 'setpoint_change_amount',
        name: 'Setpoint Change Amount',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
    },
    hvacThermostat_setpoint_change_source: {
        id: 'setpoint_change_source',
        prop: 'setpoint_change_source',
        name: 'Setpoint Change Source',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_setpoint_change_source_timestamp: {
        id: 'setpoint_change_source_timestamp',
        prop: 'setpoint_change_source_timestamp',
        name: 'Setpoint Change Source Timestamp',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_control_sequence_of_operation: {
        id: 'control_sequence_of_operation',
        prop: 'control_sequence_of_operation',
        name: 'control_sequence_of_operation',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_system_mode: {
        id: 'system_mode',
        prop: 'system_mode',
        name: 'System Mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_running_mode: {
        id: 'running_mode',
        prop: 'running_mode',
        name: 'Running Mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    hvacThermostat_running_state: {
        id: 'running_state',
        prop: 'running_state',
        name: 'Running State',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    // General hvac defined valve position, not scaled to match Hardware
    hvacThermostat_pi_heating_demand: {
        id: 'heating_demand',
        prop: 'pi_heating_demand',
        name: 'Heating Demand',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },

    // Eurotronic Spirit Zigbee specific states
    // valve position as used by the Eurotronic  Thermostat - raw 0 to 255 scaled to %
    SPBZ0001_auto_valve_position: {
        id: 'heating_demand',
        prop: 'pi_heating_demand',
        name: 'Auto Valve position',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
    },
    SPZB0001_valve_position: { //0x4001
        // if trv_mode = 1
        id: 'valve_position',
        prop: 'eurotronic_valve_position',
        name: 'Manual Valve position',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min: 0,
        max: 100,
        unit: '%',
        setter: value => { return Math.round(value * 2.55); },
        getter: payload => { return Math.round(payload.eurotronic_valve_position / 2.55); },
    },
    SPBZ0001_current_heating_setpoint: { //0x4003
        id: 'heating_setpnt_current',
        prop: 'current_heating_setpoint',
        name: 'Current Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        min: 5,
        max: 30,
    },
    SPBZ0001_trv_mode: { //0x4000
        // 1 = manual valve control
        // 2 = auto (default)
        id: 'spz_trv_mode',
        name: 'TRV Mode',
        prop: 'eurotronic_trv_mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
    },
    SPBZ0001_system_mode: { //0x4008
        // for compatibility only, bits accessible as own states via eurotronic_host_flags
        // if trv_mode = 2
        // bit 1 = rotate display 180
        // bit 2 = boost (in combination with bit 0)
        // bit 5 = Window open (Display shows OFF, auotmatically reset after n minutes)
        //                      Manual reset: Set Bits 4 and 1
        // bit 7 = Child protection
        id: 'spz_system_mode',
        name: 'Thermostat Mode',
        prop: 'eurotronic_system_mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
    },
    SPBZ0001_error_status: { //0x4002
        id: 'spz_error_status',
        name: 'Thermostat Error',
        prop: 'eurotronic_error_status',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    SPBZ0001_window_open: {
        id: 'window_open',
        name: 'Window Open / Off',
        prop: 'eurotronic_host_flags',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        inOptions: true,
        setter: (value, options) => {
            return {window_open: value};
        },
        setterOpt: (value, options) => {
            // converter needs previous value -> clone options values and set window_open to original value
            return {state: {eurotronic_host_flags: {...options, window_open: !value}}};
        },
        getter: payload => payload.eurotronic_host_flags.window_open,
    },
    SPBZ0001_boost: {
        id: 'boost',
        name: 'Boost Mode',
        prop: 'eurotronic_host_flags',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        inOptions: true,
        setter: (value, options) => {
            return {boost: value};
        },
        setterOpt: (value, options) => {
            return {state: {eurotronic_host_flags: {...options, boost: !value}}};
        },
        getter: payload => payload.eurotronic_host_flags.boost,
    },

    SPBZ0001_child_protection: {
        id: 'child_protection',
        name: 'Child Protection',
        prop: 'eurotronic_host_flags',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        inOptions: true,
        setter: (value, options) => {
            return {child_protection: value};
        },
        setterOpt: (value, options) => {
            return {state: {eurotronic_host_flags: {...options, child_protection: !value}}};
        },
        getter: payload => payload.eurotronic_host_flags.child_protection,
    },

    SPBZ0001_mirror_display: {
        id: 'mirror_display',
        name: 'Mirror Display',
        prop: 'eurotronic_host_flags',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        inOptions: true,
        setter: (value, options) => {
            return {mirror_display: value};
        },
        setterOpt: (value, options) => {
            return {state: {eurotronic_host_flags: {...options, mirror_display: !value}}};
        },
        getter: payload => payload.eurotronic_host_flags.mirror_display,
    },
    danfoss_window_open: {
        id: 'window_open_external',
        name: 'Window Opened',
        prop: 'window_open_external',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
    },
    danfoss_window_open_int: {
        id: 'window_open_detected',
        name: 'Window Open status',
        prop: 'window_open_internal',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    danfoss_testrun_day_of_week: {
        id:   'testrun_day_of_week',
        name: 'testrun_day_of_week',
        prop: 'day_of_week',
        icon:  undefined,
        role:  'state',
        write: true,
        read:  true,
        type:  'number',
        min: 0,
        max: 7,
    },
    danfoss_testrun_hour: {
        id:   'testrun_hour',
        name: 'testrun_hour',
        prop: 'trigger_time',
        icon:  undefined,
        role:  'state',
        write: true,
        read:  true,
        type:  'number',
    },
    danfoss_mounted_direction: {
        id: 'thermostat_orientation',
        name: 'Mounted horizontally',
        prop: 'thermostat_orientation',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
    },
    danfoss_mounted_mode_control: {
        id: 'mounted_mode_control',
        name: 'Set mounted mode to',
        prop: 'mounted_mode_control',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
    },
    danfoss_mounted_mode: {
        id: 'mounted_mode',
        name: 'Mounted mode',
        prop: 'mounted_mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.mounted_mode ? 'not Mounted' : 'Mounted'),
    },
    danfoss_algorithm_scale: {
        id: 'algorithm_scale_factor',
        name: 'algorithm_scale_factor',
        prop: 'algorithm_scale_factor',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        min: 1,
        max: 10,
        type: 'number',
    },
    danfoss_heat_available: {
        id: 'heat_available',
        name: 'Heat available',
        prop: 'heat_available',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
    },
    danfoss_heat_requested: {
        id: 'heat_requested',
        name: 'Heat requested',
        prop: 'heat_required',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
    },
    danfoss_display_orientation: {
        id: 'display_orientation',
        name: 'Display Orientation',
        prop: 'display_orientation',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        min:  0,
        max:  1,
        type: 'number',
    },
    thermostat_keypad_lockout:
    {
        id: 'keypad_lockout',
        name: 'Keypad Lockout',
        prop: 'keypad_lockout',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',

    },
    natgas_detected: {
        id: 'gas_detected',
        name: 'Natural Gas Detected',
        prop: 'gas',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
    },
    natgas_density: {
        id: 'gas_density',
        name: 'Naturl Gas Density',
        prop: 'gas_density',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    natgas_sensitivity: {
        id: 'gas_sensitivity',
        name: 'Naturl Gas Sensitivity',
        prop: 'sensitivity',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string', // valid: low, medium, high
    },
    lumi_lock_unlock_user_id: {
        id: 'user_id',
        name: 'User ID unlocked the lock last time',
        prop: 'user',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    lumi_lock_failed_times: {
        id: 'repeat',
        name: 'Unlock failed times',
        prop: 'repeat',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    lumi_lock_action: {
        id: 'action',
        name: 'User action',
        prop: 'action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    inserted: {
        id: 'inserted',
        prop: 'inserted',
        name: 'Number of inserted key',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.inserted === 'unknown') ? -1 : (payload.inserted === undefined ? null : parseInt(payload.inserted, 10)),
    },
    forgotten: {
        id: 'forgotten',
        prop: 'forgotten',
        name: 'Number of forgotten key',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.forgotten === undefined ? null : parseInt(payload.forgotten)),
    },
    key_error: {
        id: 'key_error',
        prop: 'key_error',
        name: 'Key error',
        icon: undefined,
        role: 'indication.error',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => !!payload.keyerror,
    },
    channel1_state: {
        id: 'channel1_state',
        prop: 'state_l1',
        name: 'Channel 1 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l1 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l1',
    },
    channel2_state: {
        id: 'channel2_state',
        prop: 'state_l2',
        name: 'Channel 2 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l2 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l2',
    },
    l1: {
        id: 'l1',
        prop: 'state_l1',
        name: 'Channel 1 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l1 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l1',
    },
    l2: {
        id: 'l2',
        prop: 'state_l2',
        name: 'Channel 2 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l2 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l2',
    },
    l3: {
        id: 'l3',
        prop: 'state_l3',
        name: 'Channel 3 switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l3 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l3',
    },
    lock_state: {
        id: 'lockState',
        prop: 'state',
        name: 'Lock state',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string',
        getter: payload => (payload.state === 'LOCK') ? 'locked' : (payload.state === 'UNLOCK') ? 'unlocked' : undefined,
    },
    DIYRUZ_buzzer: {
        id: 'buzzer',
        prop: 'state_center',
        name: 'Buzzer',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: (payload) => (payload.state_center === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'center',
    },
    zigup_cputemp: {
        id: 'cpu_temperature',
        prop: 'cpu_temperature',
        name: 'CPU temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: '°C',
    },
    zigup_exttemp: {
        id: 'external_temperature',
        prop: 'external_temperature',
        name: 'External temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: '°C',
    },
    zigup_exthumi: {
        id: 'external_humidity',
        prop: 'external_humidity',
        name: 'External humidity',
        icon: undefined,
        role: 'value.humidity',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
    },
    zigup_s0counts: {
        id: 's0_counts',
        prop: 's0_counts',
        name: 'S0 Counts',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    zigup_adc_volt: {
        id: 'adc_volt',
        prop: 'adc_volt',
        name: 'ADC volt',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    zigup_diginput: {
        id: 'dig_input',
        prop: 'dig_input',
        name: 'Digital input',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
    },
    zigup_reason: {
        id: 'reason',
        prop: 'reason',
        name: 'Reason',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    curtain_running: {
        id: 'running',
        prop: 'running',
        name: 'Curtain is running',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
    },
    curtain_position: {
        id: 'position',
        prop: 'position',
        name: 'Curtain position',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min: 0,
        max: 100,
        unit: '%',
        getter: payload => (payload.position !== null) && !isNaN(payload.position) ? payload.position : undefined,
    },
    curtain_stop: {
        id: 'stop',
        setattr: 'position',
        name: 'Stop curtain',
        icon: undefined,
        role: 'button',
        write: true,
        read: true,
        type: 'boolean',
        isEvent: true,
        setter: value => { return {state: 'stop'}; },
    },
    curtain_reverse_direction: {
        id: 'reverse_direction',
        setattr: 'reverse_direction',
        name: 'direction',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        isEvent: true,
        setterOpt: (value, options) => {
            return {...options, reverse_direction: value};
        },
    },
    blind_position: {
        id: 'position',
        prop: 'position',
        name: 'Blind position',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        min: 0,
        max: 100,
        unit: '%',
        getter: payload => (payload.position !== null) && !isNaN(payload.position) ? payload.position : undefined,
    },
    blind_stop: {
        id: 'stop',
        setattr: 'position',
        name: 'Stop blind',
        icon: undefined,
        role: 'button',
        write: true,
        read: true,
        type: 'boolean',
        isEvent: true,
        setter: value => { return {state: 'stop'}; },
    },
    hold: {
        id: 'hold',
        prop: 'action',
        name: 'Hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'hold') ? true : (payload.action === 'release') ? false : undefined,
    },
    keypad_btn1: {
        id: 'btn_1',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    ZYCT202_stop: {
        id: 'stop',
        prop: 'action',
        name: 'Stop',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'stop') ? true : false,
    },
    ZYCT202_on: {
        id: 'off',
        prop: 'action',
        name: 'On',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'on') ? true : false,
    },
    ZYCT202_off: {
        id: 'off',
        prop: 'action',
        name: 'Off',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'off') ? true : false,
    },
    ZYCT202_up: {
        id: 'up',
        name: 'Up',
        prop: 'action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'up-press') ? true : false,
    },
    ZYCT202_down: {
        id: 'down',
        name: 'Down',
        prop: 'action',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'down-press') ? true : false,
    },
    keypad_btn2: {
        id: 'btn_2',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn3: {
        id: 'btn_3',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn4: {
        id: 'btn_4',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn5: {
        id: 'btn_5',
        name: 'Button 5 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn6: {
        id: 'btn_6',
        name: 'Button 6 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn7: {
        id: 'btn_7',
        name: 'Button 7 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn8: {
        id: 'btn_8',
        name: 'Button 8 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn9: {
        id: 'btn_9',
        name: 'Button 9 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn10: {
        id: 'btn_10',
        name: 'Button 10 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn11: {
        id: 'btn_11',
        name: 'Button 11 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn12: {
        id: 'btn_12',
        name: 'Button 12 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn13: {
        id: 'btn_13',
        name: 'Button 13 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn14: {
        id: 'btn_14',
        name: 'Button 14 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn15: {
        id: 'btn_15',
        name: 'Button 15 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn16: {
        id: 'btn_16',
        name: 'Button 16 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn17: {
        id: 'btn_17',
        name: 'Button 17 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn18: {
        id: 'btn_18',
        name: 'Button 18 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn19: {
        id: 'btn_19',
        name: 'Button 19 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    keypad_btn20: {
        id: 'btn_20',
        name: 'Button 20 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
    },
    occupancy_side: {
        id: 'occupancy_side',
        prop: 'side',
        name: 'Side of occupancy',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.occupancy === true) ? payload.side : undefined,
    },
    btn1_pressed: {
        id: 'btn_1_pressed',
        prop: 'btn_1',
        name: 'Button 1 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_1 === 'hold') ? true : (payload.btn_1 === 'release') ? false : undefined,
    },
    btn1_click: {
        id: 'btn_1',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_1 === 'click') ? true : undefined,
        isEvent: true,
    },
    btn2_pressed: {
        id: 'btn_2_pressed',
        prop: 'btn_2',
        name: 'Button 2 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_2 === 'hold') ? true : (payload.btn_2 === 'release') ? false : undefined,
    },
    btn2_click: {
        id: 'btn_2',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_2 === 'click') ? true : undefined,
        isEvent: true,
    },
    btn3_pressed: {
        id: 'btn_3_pressed',
        prop: 'btn_3',
        name: 'Button 3 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_3 === 'hold') ? true : (payload.btn_3 === 'release') ? false : undefined,
    },
    btn3_click: {
        id: 'btn_3',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_3 === 'click') ? true : undefined,
        isEvent: true,
    },
    btn4_pressed: {
        id: 'btn_4_pressed',
        prop: 'btn_4',
        name: 'Button 4 pressed',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_4 === 'hold') ? true : (payload.btn_4 === 'release') ? false : undefined,
    },
    btn4_click: {
        id: 'btn_4',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.btn_4 === 'click') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_1: {
        id: 'button_1_click',
        prop: 'action',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_1_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_1_double: {
        id: 'button_1_double',
        prop: 'action',
        name: 'Button 1 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_1_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_1_triple: {
        id: 'button_1_triple',
        prop: 'action',
        name: 'Button 1 triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_1_triple') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_1_hold: {
        id: 'button_1_hold',
        prop: 'action',
        name: 'Button 1 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_1_hold') ? true : (payload.action === 'button_1_release') ? false : undefined,
    },
    aqara_opple_2: {
        id: 'button_2_click',
        prop: 'action',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_2_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_2_double: {
        id: 'button_2_double',
        prop: 'action',
        name: 'Button 2 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_2_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_2_triple: {
        id: 'button_2_triple',
        prop: 'action',
        name: 'Button 2 triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_2_triple') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_2_hold: {
        id: 'button_2_hold',
        prop: 'action',
        name: 'Button 2 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_2_hold') ? true : (payload.action === 'button_2_release') ? false : undefined,
    },
    aqara_opple_3: {
        id: 'button_3_click',
        prop: 'action',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_3_double: {
        id: 'button_3_double',
        prop: 'action',
        name: 'Button 3 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_3_triple: {
        id: 'button_3_triple',
        prop: 'action',
        name: 'Button 3 triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_triple') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_3_hold: {
        id: 'button_3_hold',
        prop: 'action',
        name: 'Button 3 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_3_hold') ? true : (payload.action === 'button_3_release') ? false : undefined,
    },
    aqara_opple_4: {
        id: 'button_4_click',
        prop: 'action',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_4_double: {
        id: 'button_4_double',
        prop: 'action',
        name: 'Button 4 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_4_triple: {
        id: 'button_4_triple',
        prop: 'action',
        name: 'Button 4 triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_triple') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_4_hold: {
        id: 'button_4_hold',
        prop: 'action',
        name: 'Button 4 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_4_hold') ? true : (payload.action === 'button_4_release') ? false : undefined,
    },
    aqara_opple_5: {
        id: 'button_5_click',
        prop: 'action',
        name: 'Button 5 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_5_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_5_double: {
        id: 'button_5_double',
        prop: 'action',
        name: 'Button 5 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_5_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_5_triple: {
        id: 'button_5_triple',
        prop: 'action',
        name: 'Button 5 triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_5_triple') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_5_hold: {
        id: 'button_5_hold',
        prop: 'action',
        name: 'Button 5 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_5_hold') ? true : (payload.action === 'button_5_release') ? false : undefined,
    },
    aqara_opple_6: {
        id: 'button_6_click',
        prop: 'action',
        name: 'Button 6 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_6_single') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_6_double: {
        id: 'button_6_double',
        prop: 'action',
        name: 'Button 6 double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_6_double') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_6_triple: {
        id: 'button_6_triple',
        prop: 'action',
        name: 'Button 6 triple click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_6_triple') ? true : undefined,
        isEvent: true,
    },
    aqara_opple_6_hold: {
        id: 'button_6_hold',
        prop: 'action',
        name: 'Button 6 hold',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'button_6_hold') ? true : (payload.action === 'button_6_release') ? false : undefined,
    },
    aqara_opple_mode: {
        id: 'mode',
        prop: 'operation_mode',
        name: 'Commands mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => (value) ? 'command' : 'event',
    },
    genOnOff: {
        id: 'genOnOff',
        prop: 'click',
        name: 'Generic On Off',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: false,
        getter: payload => (payload.click === 'on' ? true : payload.click === 'off' ? false : undefined),
    },
    sensitivity: {
        id: 'sensitivity',
        name: 'Sensor sensitivity',
        prop: 'sensitivity',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string', // valid: low, medium, high
        states: 'low:low;medium:medium;high:high',
    },
    cover_stop: {
        id: 'cover_stop',
        prop: 'click',
        name: 'Stop event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'release') ? true : undefined,
    },
    cover_open: {
        id: 'cover_open',
        prop: 'click',
        name: 'Open event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'open') ? true : undefined,
    },
    cover_release: {
        id: 'cover_release',
        prop: 'click',
        name: 'Open',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'release') ? true : undefined,
    },
    cover_close: {
        id: 'cover_close',
        prop: 'click',
        name: 'Close event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.click === 'close') ? true : undefined,
    },
    disarm: {
        id: 'disarm',
        prop: 'action',
        name: 'Disarm',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'disarm') ? true : undefined,
    },
    arm_stay: {
        id: 'arm_stay',
        prop: 'action',
        name: 'Arm stay',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'arm_day_zones') ? true : undefined,
    },
    arm_away: {
        id: 'arm_away',
        prop: 'action',
        name: 'Arm away',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'arm_all_zones') ? true : undefined,
    },
    emergency: {
        id: 'emergency',
        prop: 'action',
        name: 'Emergency',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'emergency') ? true : undefined,
    },
    white_brightness: {
        id: 'white_brightness',
        prop: 'brightness',
        name: 'White brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: true,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        getter: payload => {
            return utils.bulbLevelToAdapterLevel(payload.white_value);
        },
        setter: (value, options) => {
            return utils.adapterLevelToBulbLevel(value);
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            const preparedOptions = {...options, transition: transitionTime};
            preparedOptions.white_value = utils.adapterLevelToBulbLevel(value);
            return preparedOptions;
        },
        epname: 'white',
    },
    white_state: {
        id: 'white_state',
        prop: 'state',
        name: 'White channel state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        epname: 'white',
    },
    white_colortemp: {
        id: 'white_colortemp',
        prop: 'color_temp',
        name: 'White channel color temperature',
        icon: undefined,
        role: 'level.color.temperature',
        write: true,
        read: true,
        type: 'number',
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {...options, transition: transitionTime};
        },
        epname: 'white',
    },
    white8_brightness: {
        id: 'white_brightness',
        prop: 'brightness',
        name: 'White brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: true,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        getter: payload => {
            return utils.bulbLevelToAdapterLevel(payload.white_value);
        },
        setter: (value, options) => {
            return utils.adapterLevelToBulbLevel(value);
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            const preparedOptions = {...options, transition: transitionTime};
            preparedOptions.white_value = utils.adapterLevelToBulbLevel(value);
            return preparedOptions;
        },
        epname: 'cct',
    },
    white8_state: {
        id: 'white_state',
        prop: 'state',
        name: 'White channel state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        epname: 'cct',
    },
    white8_colortemp: {
        id: 'white_colortemp',
        prop: 'color_temp',
        name: 'White channel color temperature',
        icon: undefined,
        role: 'level.color.temperature',
        write: true,
        read: true,
        type: 'number',
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {...options, transition: transitionTime};
        },
        epname: 'cct',
    },
    gl_state: {
        id: 'state',
        name: 'Switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setterOpt: (value, options) => {
            return {...options, state: {white_value: -1}};
        },
        inOptions: true,
        epname: 'rgb',
    },
    gl_brightness: {
        id: 'brightness',
        name: 'Brightness',
        icon: undefined,
        role: 'level.dimmer',
        write: true,
        read: true,
        type: 'number',
        unit: '',
        min: 0,
        max: 100,
        getter: payload => {
            return utils.bulbLevelToAdapterLevel(payload.brightness);
        },
        setter: (value, options) => {
            return utils.adapterLevelToBulbLevel(value);
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            const preparedOptions = {...options, transition: transitionTime, state: {white_value: -1}};
            preparedOptions.brightness = utils.adapterLevelToBulbLevel(value);
            return preparedOptions;
        },
        epname: 'rgb',
    },
    gl_colortemp: {
        id: 'colortemp',
        prop: 'color_temp',
        name: 'Color temperature',
        icon: undefined,
        role: 'level.color.temperature',
        write: true,
        read: true,
        type: 'number',
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {...options, transition: transitionTime, state: {white_value: -1}};
        },
        epname: 'rgb',
    },
    gl_color: {
        id: 'color',
        prop: 'color',
        name: 'Color',
        icon: undefined,
        role: 'level.color.rgb',
        write: true,
        read: true,
        type: 'string',
        setter: (value) => {
            // convert RGB to XY for set
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(value);
            let xy = [0, 0];
            if (result) {
                const r = parseInt(result[1], 16),
                    g = parseInt(result[2], 16),
                    b = parseInt(result[3], 16);
                xy = rgb.rgb_to_cie(r, g, b);
            }
            return {
                x: xy[0],
                y: xy[1]
            };
        },
        setterOpt: (value, options) => {
            const hasTransitionTime = options && options.hasOwnProperty('transition_time');
            const transitionTime = hasTransitionTime ? options.transition_time : 0;
            return {...options, transition: transitionTime, state: {white_value: -1}};
        },
        epname: 'rgb',
    },
    moes_trv_running_mode: {
        id: 'running',
        name: 'Running',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean', // valid: low, medium, high
        getter: payload => (payload.running === 'ON'),
    },
    moes_trv_program_mode: {
        id: 'program_mode',
        name: 'Program Mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean', // valid: low, medium, high
        getter: payload => (payload.program_mode === 'ON'),
    },
    moes_trv_manual_mode: {
        id: 'manual_mode',
        name: 'Manual Mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean', // valid: low, medium, high
        getter: payload => (payload.manual_mode === 'ON'),
    },
    moes_trv_heating: {
        id: 'heating',
        name: 'Heating',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean', // valid: low, medium, high
        getter: payload => (payload.heating === 'ON'),
    },
    tuya_trv_target_temperature: {
        id: 'target_temperature',
        prop: 'current_heating_setpoint',
        name: 'Current Target Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        min: 0,
        max: 70,
    },
    tuya_trv_lock: {
        id: 'lock',
        name: 'Locked',
        prop: 'child_lock',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.child_lock === 'LOCKED'),
    },
    tuya_trv_window_detected: {
        id: 'window_detected',
        name: 'Window detected',
        prop: 'window_detection',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.window_detection === 'ON'),
    },
    tuya_trv_valve_detected: {
        id: 'valve_detected',
        name: 'Valve detected',
        prop: 'valve_detection',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.valve_detection === 'ON'),
    },
    tuya_trv_auto_lock: {
        id: 'auto_lock',
        name: 'Auto lock',
        prop: 'auto_lock',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.auto_lock === 'AUTO'),
    },
    tuya_trv_min_temp: {
        id: 'min_temperature',
        prop: 'min_temperature',
        name: 'Minimal Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        min: 0,
        max: 70,
    },
    tuya_trv_max_temp: {
        id: 'max_temperature',
        prop: 'max_temperature',
        name: 'Maximal Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        min: 0,
        max: 70,
    },
    tuya_trv_boost_time: {
        id: 'boost_time',
        prop: 'boost_time',
        name: 'Boost time',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: 'sec',
        min: 0,
        max: 600,
    },
    tuya_trv_comfort_temp: {
        id: 'comfort_temperature',
        prop: 'comfort_temperature',
        name: 'Comfort Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        min: 0,
        max: 70,
    },
    tuya_trv_eco_temp: {
        id: 'eco_temperature',
        prop: 'eco_temperature',
        name: 'ECO Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: true,
        read: true,
        type: 'number',
        unit: '°C',
        min: 0,
        max: 70,
    },
    tuya_trv_system_mode: {
        id: 'mode',
        name: 'Mode',
        prop: 'system_mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string', // valid: low, medium, high
        states: 'off:off;auto:auto;manual:manual;comfort:comfort;eco:eco;boost:boost;complex:complex',
    },
    tuya_trv_force_mode: {
        id: 'mode_force',
        name: 'Mode force',
        prop: 'force',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string', // valid: low, medium, high
        states: 'normal:normal;open:open;close:close',
    },
    tuya_trv_valve_position: {
        id: 'valve_position',
        prop: 'position',
        name: 'Valve position',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        min: 0,
        max: 100,
        unit: '%',
    },
    //iCasa
    scenes_recall_click: {
        id: 'scene',
        prop: 'click',
        name: 'Scene Recall',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        getter: payload => (payload.click === 'off') ? 0 : (payload.click === 'on') ? 1 : parseInt(payload.click) + 1,
    },
    icasa_click: {
        id: 'click',
        prop: 'click',
        name: 'Click',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.click === 'off') ? false : (payload.click === 'on') ? true : undefined,
    },
    icasa_action: {
        id: 'rotation',
        prop: 'action',
        name: 'Rotation',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action === 'rotate_left') ? 'left' : (payload.action === 'rotate_right') ? 'right' : (payload.action === 'rotate_stop') ? 'stop' : undefined,
    },
    icasa_brightness: {
        id: 'brightness',
        prop: 'brightness',
        name: 'brightness',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        getter: payload => payload.brightness,
    },
    top_state: {
        id: 'top_state',
        prop: 'state_top',
        name: 'Top switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_top === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'top',
    },
    bottom_state: {
        id: 'bottom_state',
        prop: 'state_bottom',
        name: 'Bottom switch state',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_bottom === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'bottom',
    },
    voc: {
        id: 'voc',
        name: 'VOC',
        icon: undefined,
        role: 'value.voc',
        write: false,
        read: true,
        type: 'number',
        unit: ''
    },
    eco2: {
        id: 'eco2',
        name: 'Eco2',
        icon: undefined,
        role: 'value.eco2',
        write: false,
        read: true,
        type: 'number',
        unit: ''
    },
    ts0042_right_click: {
        id: 'button_right_click',
        prop: 'action',
        name: 'Button right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'right_single') ? true : undefined,
        isEvent: true,
    },
    ts0042_left_click: {
        id: 'button_left_click',
        prop: 'action',
        name: 'Button left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'left_single') ? true : undefined,
        isEvent: true,
    },
    ts0042_right_double: {
        id: 'button_right_double',
        prop: 'action',
        name: 'Button right double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'right_double') ? true : undefined,
        isEvent: true,
    },
    ts0042_left_double: {
        id: 'button_left_double',
        prop: 'action',
        name: 'Button left double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'left_double') ? true : undefined,
        isEvent: true,
    },
    ts0042_right_hold: {
        id: 'button_right_hold',
        prop: 'action',
        name: 'Button right hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'right_hold') ? true : undefined,
        isEvent: true,
    },
    ts0042_left_hold: {
        id: 'button_left_hold',
        prop: 'action',
        name: 'Button left hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'left_hold') ? true : undefined,
        isEvent: true,
    },
    ts0043_right_click: {
        id: 'button_right_click',
        prop: 'action',
        name: 'Button right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '3_single') ? true : undefined,
        isEvent: true,
    },
    ts0043_middle_click: {
        id: 'button_middle_click',
        prop: 'action',
        name: 'Button middle click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '2_single') ? true : undefined,
        isEvent: true,
    },
    ts0043_left_click: {
        id: 'button_left_click',
        prop: 'action',
        name: 'Button left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '1_single') ? true : undefined,
        isEvent: true,
    },
    ts0043_right_double: {
        id: 'button_right_double',
        prop: 'action',
        name: 'Button right double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '3_double') ? true : undefined,
        isEvent: true,
    },
    ts0043_middle_double: {
        id: 'button_middle_double',
        prop: 'action',
        name: 'Button middle double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '2_double') ? true : undefined,
        isEvent: true,
    },
    ts0043_left_double: {
        id: 'button_left_double',
        prop: 'action',
        name: 'Button left double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '1_double') ? true : undefined,
        isEvent: true,
    },
    ts0043_right_hold: {
        id: 'button_right_hold',
        prop: 'action',
        name: 'Button right hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '3_hold') ? true : undefined,
        isEvent: true,
    },
    ts0043_middle_hold: {
        id: 'button_middle_hold',
        prop: 'action',
        name: 'Button middle hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '2_hold') ? true : undefined,
        isEvent: true,
    },
    ts0043_left_hold: {
        id: 'button_left_hold',
        prop: 'action',
        name: 'Button left hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === '1_hold') ? true : undefined,
        isEvent: true,
    },
    rm01_row_2: {
        id: 'rm01_row_2',
        prop: 'action',
        name: 'Button ROW 2',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'row_2_on') ? true : (payload.action === 'row_2_off') ? false : undefined,
    },
    rm01_row_3: {
        id: 'rm01_row_3',
        prop: 'action',
        name: 'Button ROW 3',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'row_3_on') ? true : (payload.action === 'row_3_off') ? false : undefined,
    },
    rm01_row_4: {
        id: 'rm01_row_4',
        prop: 'action',
        name: 'Button ROW 4',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'row_4_on') ? true : (payload.action === 'row_4_off') ? false : undefined,
    },
    left_top_click: {
        id: 'left_top_click',
        prop: 'action',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_top_click') ? true : undefined,
    },
    right_top_click: {
        id: 'right_top_click',
        prop: 'action',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_top_click') ? true : undefined,
    },
    left_bottom_click: {
        id: 'left_bottom_click',
        prop: 'action',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_bottom_click') ? true : undefined,
    },
    right_bottom_click: {
        id: 'right_bottom_click',
        prop: 'action',
        name: 'Click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_bottom_click') ? true : undefined,
    },
    left_top_hold: {
        id: 'left_top_hold',
        prop: 'action',
        name: 'Hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_top_hold') ? true : undefined,
    },
    right_top_hold: {
        id: 'right_top_hold',
        prop: 'action',
        name: 'Hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_top_hold') ? true : undefined,
    },
    left_bottom_hold: {
        id: 'left_bottom_hold',
        prop: 'action',
        name: 'Hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_bottom_hold') ? true : undefined,
    },
    right_bottom_hold: {
        id: 'right_bottom_hold',
        prop: 'action',
        name: 'Hold event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_bottom_hold') ? true : undefined,
    },
    left_top_release: {
        id: 'left_top_release',
        prop: 'action',
        name: 'Release event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_top_release') ? true : undefined,
    },
    right_top_release: {
        id: 'right_top_release',
        prop: 'action',
        name: 'Release event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_top_release') ? true : undefined,
    },
    left_bottom_release: {
        id: 'left_bottom_release',
        prop: 'action',
        name: 'Release event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_bottom_release') ? true : undefined,
    },
    right_bottom_release: {
        id: 'right_bottom_release',
        prop: 'action',
        name: 'Release event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_bottom_release') ? true : undefined,
    },
    lumi_left_click: {
        id: 'left_click',
        prop: 'action',
        name: 'Left click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left') ? true : undefined,
    },
    lumi_right_click: {
        id: 'right_click',
        prop: 'action',
        name: 'Right click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right') ? true : undefined,
    },
    lumi_both_click: {
        id: 'both_click',
        prop: 'action',
        name: 'Both click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'both') ? true : undefined,
    },
    lumi_left_click_long: {
        id: 'left_click_long',
        prop: 'action',
        name: 'Left Long click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_long') ? true : undefined,
    },
    lumi_right_click_long: {
        id: 'right_click_long',
        prop: 'action',
        name: 'Right Long click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_long') ? true : undefined,
    },
    lumi_left_click_double: {
        id: 'left_click_double',
        prop: 'action',
        name: 'Left double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'left_double') ? true : undefined,
    },
    lumi_right_click_double: {
        id: 'right_click_double',
        prop: 'action',
        name: 'Right double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'right_double') ? true : undefined,
    },
    lumi_both_click_long: {
        id: 'both_click_long',
        prop: 'action',
        name: 'Both long click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'both_long') ? true : undefined,
    },
    lumi_both_click_double: {
        id: 'both_click_double',
        prop: 'action',
        name: 'Both double click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'both_double') ? true : undefined,
    },
    plug_summdelivered: {
        id: 'energy',
        name: 'Consumption',
        icon: undefined,
        role: 'value',
        write: false,
        read: true,
        type: 'number',
        unit: 'kWh'
    },
    alarm: {
        id: 'alarm',
        prop: 'alarm',
        name: 'alarm',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'boolean',
    },
    melody: {
        id: 'melody',
        prop: 'melody',
        name: 'melody',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number'
    },
    volume: {
        id: 'volume',
        prop: 'volume',
        name: 'volume',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'string', // valid: low, medium, high
        states: 'low:low;medium:medium;high:high',
    },
    duration: {
        id: 'duration',
        prop: 'duration',
        name: 'duration',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number'
    },
    temperature_max: {
        id: 'temperature_max',
        prop: 'temperature_max',
        name: 'temperature max',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number'
    },
    temperature_min: {
        id: 'temperature_min',
        prop: 'temperature_min',
        name: 'temperature min',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number'
    },
    humidity_max: {
        id: 'humidity_max',
        prop: 'humidity_max',
        name: 'humidity max',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number'
    },
    humidity_min: {
        id: 'humidity_min',
        prop: 'humidity_min',
        name: 'humidity min',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number'
    },
    temperature_alarm: {
        id: 'temperature_alarm',
        prop: 'temperature_alarm',
        name: 'temperature alarm',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'boolean'
    },
    humidity_alarm: {
        id: 'humidity_alarm',
        prop: 'humidity_alarm',
        name: 'humidity alarm',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'boolean',
    },
    l1_state: {
        id: 'l1_state',
        prop: 'state_l1',
        name: 'Channel 1',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l1 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l1',
    },
    l2_state: {
        id: 'l2_state',
        prop: 'state_l2',
        name: 'Channel 2',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l2 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l2',
    },
    l3_state: {
        id: 'l3_state',
        prop: 'state_l3',
        name: 'Channel 3',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l3 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l3',
    },
    l4_state: {
        id: 'l4_state',
        prop: 'state_l4',
        name: 'Channel 4',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l4 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l4',
    },
    l5_state: {
        id: 'l5_state',
        prop: 'state_l5',
        name: 'Channel 5',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l5 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l5',
    },
    l6_state: {
        id: 'l6_state',
        prop: 'state_l6',
        name: 'Channel 6',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l6 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l6',
    },
    l7_state: {
        id: 'l7_state',
        prop: 'state_l7',
        name: 'Channel 7',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l7 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l7',
    },
    l8_state: {
        id: 'l8_state',
        prop: 'state_l8',
        name: 'Channel 8',
        icon: undefined,
        role: 'switch',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.state_l8 === 'ON'),
        setter: (value) => (value) ? 'ON' : 'OFF',
        setattr: 'state',
        epname: 'l8',
    },
    btn1_single: {
        id: 'btn1_single',
        prop: 'action',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_1') ? true : undefined,
    },
    btn2_single: {
        id: 'btn2_single',
        prop: 'action',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_2') ? true : undefined,
    },
    btn3_single: {
        id: 'btn3_single',
        prop: 'action',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_3') ? true : undefined,
    },
    btn4_single: {
        id: 'btn4_single',
        prop: 'action',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_4') ? true : undefined,
    },
    btn5_single: {
        id: 'btn5_single',
        prop: 'action',
        name: 'Button 5 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_5') ? true : undefined,
    },
    btn6_single: {
        id: 'btn6_single',
        prop: 'action',
        name: 'Button 6 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_6') ? true : undefined,
    },
    btn7_single: {
        id: 'btn7_single',
        prop: 'action',
        name: 'Button 7 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_7') ? true : undefined,
    },
    btn8_single: {
        id: 'btn8_single',
        prop: 'action',
        name: 'Button 8 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'single_8') ? true : undefined,
    },
    radioactive_events_per_minute: {
        id: 'radioactive_events_per_minute',
        name: 'Radioactive events per minute',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: ''
    },
    radiation_dose_per_hour: {
        id: 'radiation_dose_per_hour',
        name: 'Radiation dose per hour',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: ''
    },
    action_onoff: {
        id: 'state',
        prop: 'action',
        name: 'Action',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on') ? true : ((payload.action === 'off') ? false : undefined),
    },
    geiger_sensitivity: {
        id: 'sensitivity',
        name: 'Sensitivity',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: ''
    },
    geiger_led_feedback: {
        id: 'led_feedback',
        name: 'Led feedback',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => (value) ? 'ON' : 'OFF',
    },
    geiger_buzzer_feedback: {
        id: 'buzzer_feedback',
        name: 'Buzzer_feedback',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => (value) ? 'ON' : 'OFF',
    },
    geiger_sensors_count: {
        id: 'sensors_count',
        name: 'Sensors count',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: ''
    },
    geiger_sensors_type: {
        id: 'sensors_type',
        name: 'Sensors type',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string',
        states: '0:СБМ-20/СТС-5/BOI-33;1:СБМ-19/СТС-6;3:Other',
        setter: (value) => parseInt(value),
    },
    geiger_alert_threshold: {
        id: 'alert_threshold',
        name: 'Alert threshold',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: ''
    },
    scene: {
        id: 'scene',
        prop: 'action',
        name: 'Scene',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        getter: payload => (payload.action.startsWith('scene_')) ? payload.action.split('_')[1] : undefined,
    },
    brightness_step_up: {
        id: 'brightness_step_up',
        prop: 'action',
        name: 'Brightness step up event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_step_up') ? true : undefined,
    },
    brightness_step_down: {
        id: 'brightness_step_down',
        prop: 'action',
        name: 'Brightness step down event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_step_down') ? true : undefined,
    },
    brightness_step_up_size: {
        id: 'brightness_step_up_size',
        prop: 'action',
        name: 'Brightness step up size',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'brightness_step_up') ? payload.action_step_size : undefined,
    },
    brightness_step_down_size: {
        id: 'brightness_step_down_size',
        prop: 'action',
        name: 'Brightness step down size',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'brightness_step_down') ? payload.action_step_size : undefined,
    },
    brightness_stop: {
        id: 'brightness_stop',
        prop: 'action',
        name: 'Brightness stop event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_stop') ? true : undefined,
    },
    color_temperature_move: {
        id: 'color_temperature_move',
        prop: 'action',
        name: 'Color temperature move event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'color_temperature_move') ? true : undefined,
    },
    color_temperature_move_value: {
        id: 'color_temperature_move_value',
        prop: 'action',
        name: 'Color temperature move value',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'color_temperature_move') ? payload.action_color_temperature : undefined,
    },
    color_move: {
        id: 'color_move',
        prop: 'action',
        name: 'Color move event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'color_move') ? true : undefined,
    },
    color_move_value: {
        id: 'color_move_value',
        prop: 'action',
        name: 'Color move value',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
        getter: (payload) => {
            if( payload.action === 'color_move') {
                const colorval = rgb.cie_to_rgb(payload.action_color.x, payload.action_color.y);
                return '#' + utils.decimalToHex(colorval[0]) + utils.decimalToHex(colorval[1]) + utils.decimalToHex(colorval[2]);
            } else {
                return undefined;
            }
        }
    },
    brightness_move_up: {
        id: 'brightness_move_up',
        prop: 'action',
        name: 'Brightness move up event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_move_up') ? true : undefined,
    },
    brightness_move_up_size: {
        id: 'brightness_move_up_size',
        prop: 'action',
        name: 'Brightness move up size',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'brightness_move_up') ? payload.action_rate : undefined,
    },
    brightness_move_down: {
        id: 'brightness_move_down',
        prop: 'action',
        name: 'Brightness move down event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'brightness_move_down') ? true : undefined,
    },
    brightness_move_down_size: {
        id: 'brightness_move_down_size',
        prop: 'action',
        name: 'Brightness move down size',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'brightness_move_down') ? payload.action_rate : undefined,
    },
    enhanced_move_to_hue_and_saturation: {
        id: 'enhanced_move',
        prop: 'action',
        name: 'Enhanced move to hue and saturation event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        isEvent: true,
        getter: payload => (payload.action === 'enhanced_move_to_hue_and_saturation') ? true : undefined,
    },
    enhanced_move_enhanced_hue: {
        id: 'enhanced_move_enhanced_hue',
        prop: 'action',
        name: 'Enhanced_hue',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'enhanced_move_to_hue_and_saturation') ? payload.action_enhanced_hue : undefined,
    },
    enhanced_move_hue: {
        id: 'enhanced_move_hue',
        prop: 'action',
        name: 'Hue',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'enhanced_move_to_hue_and_saturation') ? payload.action_hue : undefined,
    },
    enhanced_move_saturation: {
        id: 'enhanced_move_saturation',
        prop: 'action',
        name: 'Saturation',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'number',
        unit: '',
        getter: payload => (payload.action === 'enhanced_move_to_hue_and_saturation') ? payload.action_saturation : undefined,
    },
    density: {
        id: 'density',
        prop: 'smoke_density',
        name: 'Smoke density',
        icon: undefined,
        role: 'indicator.alarm.fire',
        write: false,
        read: true,
        type: 'number',
        unit: ''
    },
    selftest: {
        id: 'selftest',
        name: 'Self test',
        icon: undefined,
        role: 'button',
        write: true,
        read: true,
        type: 'boolean',
    },
    invert_cover: {
        id: 'invert_cover',
        name: 'Invert cover',
        icon: undefined,
        role: 'state',
        write: true,
        read: false,
        type: 'boolean',
        isOption: true,
    },
    soil_moisture: {
        id: 'soil_moisture',
        name: 'Soil moisture',
        icon: undefined,
        role: 'value.moisture',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
    },
    gira_pressed_up: {
        id: 'action',
        prop: 'up',
        name: 'Button pressed up',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
    },
    gira_pressed_down_hold: {
        id: 'action',
        prop: 'down',
        name: 'Button pressed down',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
    },
    gira_pressed_stop: {
        id: 'action',
        prop: 'stop',
        name: 'Button pressed stop',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
    },
    gira_scene_click: {
        id: 'action',
        name: 'Button scene_click',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'string',
    },
    gira_step_mode: {
        id: 'step_mode',
        name: 'Button step_mode',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },
    gira_step_size: {
        id: 'step_size',
        name: 'Button step_size',
        icon: undefined,
        role: 'state',
        write: false,
        read: true,
        type: 'string',
    },

    rob_1_click: {
        id: 'button_1_click',
        prop: 'action',
        name: 'Button 1 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on_1') ? false : ( payload.action === 'off_1' ) ? true : undefined,
        isEvent: true,
    },
    rob_2_click: {
        id: 'button_2_click',
        prop: 'action',
        name: 'Button 2 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on_2') ? false : ( payload.action === 'off_2' ) ? true : undefined,
        isEvent: true,
    },
    rob_3_click: {
        id: 'button_3_click',
        prop: 'action',
        name: 'Button 3 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on_3') ? false : ( payload.action === 'off_3' ) ? true : undefined,
        isEvent: true,
    },
    rob_4_click: {
        id: 'button_4_click',
        prop: 'action',
        name: 'Button 4 click event',
        icon: undefined,
        role: 'button',
        write: false,
        read: true,
        type: 'boolean',
        getter: payload => (payload.action === 'on_4') ? false : ( payload.action === 'off_4' ) ? true : undefined,
        isEvent: true,
    },

    hy_system_mode: {
        id: 'mode',
        name: 'Mode',
        prop: 'system_mode',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string',
        states: 'auto:auto;manual:manual;away:away',
    },
    child_lock: {
        id: 'lock',
        name: 'Locked',
        prop: 'child_lock',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        getter: payload => (payload.child_lock === 'LOCKED'),
        setter: (value) => (value) ? 'LOCKED' : 'UNLOCKED',
    },
    volume_percent: {
        id: 'volume',
        prop: 'volume',
        name: 'volume',
        icon: undefined,
        role: '',
        write: true,
        read: true,
        type: 'number',
        unit: '%'
    },
    hy_sensor_type: {
        id: 'sensor_type',
        name: 'Sensor type',
        prop: 'sensor_type',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'string',
        states: 'internal:internal;external:external;both:both',
    },
    hvacThermostat_external_temp: {
        id: 'external_temp',
        prop: 'external_temperature',
        name: 'External Temperature',
        icon: undefined,
        role: 'value.temperature',
        write: false,
        read: true,
        type: 'number',
        unit: '°C',
    },
    alarm_info: {
        id: 'alarm',
        prop: 'alarm',
        name: 'Alarm',
        icon: undefined,
        role: '',
        write: false,
        read: true,
        type: 'boolean',
    },
	co2: {
	    id: 'co2',
        prop: 'co2',
        name: 'co2',
        icon: undefined,
        role: 'value.co2',
        write: false,
        read: true,
        type: 'number',	
		unit: 'ppm',
	},
	    airsense_led_feedback: {
        id: 'led_feedback',
        name: 'Led feedback',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => (value) ? 'ON' : 'OFF',
    },
		airsense_enable_abc: {
        id: 'enable_abc',
        name: 'Enable abc',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        setter: (value) => (value) ? 'ON' : 'OFF',
    },
	airsense_threshold1: {
        id: 'threshold1',
        name: 'Threshold1',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: ''
	},
		airsense_threshold2: {
        id: 'threshold2',
        name: 'Threshold2',
        icon: undefined,
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: ''
	},
};

module.exports = {
    states: states,
};
