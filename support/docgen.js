/**
 * This script generates the supported devices page.
 * 
 */

let devices = [...require('zigbee-herdsman-converters').devices];

for (const device of devices) {
    if (device.whiteLabel) {
        for (const whiteLabel of device.whiteLabel) {
            const whiteLabelDevice = {
                ...device,
                model: whiteLabel.model,
                vendor: whiteLabel.vendor,
                description: whiteLabel.description,
                whiteLabelOf: device,
            };

            delete whiteLabelDevice.whiteLabel;

            devices.push(whiteLabelDevice);
        }
    }
}

devices = new Map(devices.map((d) => [d.model, d]));

let iobDevices = require('../lib/devices').devices;

iobDevices = new Map(iobDevices.map((d) => d.models.map((m) => [m, d])).flat());

const fs = require('fs');
const outputdir = process.argv[2];

if (!outputdir) {
    console.error('Please specify an output directory');
}

const file = 'Supported-devices.md';
let text = '*NOTE: Automatically generated by `npm run docgen`* \n \n';

const logDevices = (devmodels) => {
    let result = '';

    devmodels.forEach((devmodel) => {
        const iobDevice = iobDevices.get(devmodel);
        const device = devices.get(devmodel);
        const pathImg  = iobDevice.icon.replace(new RegExp('img/', 'g'), '').replace(new RegExp('.png', 'g'), '');
        let brand;
        const models = [];
        let zmodels;
        if (device.zigbeeModel) {
            zmodels = device.zigbeeModel;
        } else {
            zmodels = [devmodel];
        }
        zmodels.forEach((modelId) => {
            const re = /[^\x20-\x7E]+/g;
            const model = modelId.replace(re, ' ');
            const desc = `${device.description} (${device.supports})`;
            const name = `**${device.model}**<br>`;
            if (brand == undefined) {
                brand= {
                    name: name,
                    desc: desc,
                    pathImg: pathImg,
                };
            }
            models.push(model);
        });
        const modelsStr = models.join(', ');
        result += `| ${brand.name} (${modelsStr}) | ${brand.desc} |  ![${brand.pathImg}]` + '(https://github.com/ioBroker/ioBroker.zigbee/blob/master/admin/' + `${iobDevice.icon}) |\n`;
    });

    return result;
};

const vendors = Array.from(new Set([...iobDevices.keys()].map((m) => devices.get(m).vendor)));
vendors.sort();
text += '|  Model | Description | Picture |\n';
text += '| ------------- | ------------- | -------------------------- |\n';
vendors.forEach((vendor) => {
    text += `|  | **${vendor}**  |   |\n`;   
    text += logDevices([...iobDevices.keys()].map((m) => devices.get(m)).filter((d) => d.vendor === vendor).map((d) => d.model));
});

fs.writeFileSync(outputdir + '/' + file, text);
